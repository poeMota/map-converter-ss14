from PIL import Image
from math import floor

from src.GridSystem import *
from src.Tiles import TilesRefsManager
from src.EntitySystem import Entity
from src.ColorHelper import *
from .selectors import *



def ConvertImageToMap(img: Image, colormap: dict):
    _tilesRefsMan = TilesRefsManager()

    pixels = img.load()
    width, height = img.size
    chunkSize = 16

    _map = Map()
    grid = Grid(_map, [],
                "Autogenerated grid",
                -(width // 2),
                -(height // 2)
                )

    for x in range(width):
        for y in range(height):
            inv_y = height - y - 1
            color = rgbaToHex(pixels[x, y])
            selector = colormap[color]

            # Add tiles
            ind = [floor(x / chunkSize),
                   floor(inv_y / chunkSize)]
            strInd = f"{ind[0]},{ind[1]}"
            if strInd not in grid.chunks:
                grid.AddChunk(Chunk(ind))

            tile = Tile(x, inv_y, selector.tileName)
            grid.SetTile(tile, _tilesRefsMan)

            # Add entities
            if type(selector) is EntitySelector:
                [Entity(
                    proto       = proto,
                    pos         = [x, inv_y],
                    parent      = grid.uid,
                    name        = selector.name,
                    description = selector.description
                ) for proto in selector.protos]

    _map.addGrid(grid)
    return _map

